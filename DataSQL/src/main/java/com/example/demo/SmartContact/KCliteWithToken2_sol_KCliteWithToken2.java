package com.example.demo.SmartContact;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class KCliteWithToken2_sol_KCliteWithToken2 extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_TOKENLIST = "TokenList";

    public static final String FUNC_GETTOKEN = "getToken";

    public static final String FUNC_SENDRQST = "sendRqst";

    public static final String FUNC_GETHPSTIP = "getHpstIp";

    public static final String FUNC_HSPTLIST = "HsptList";

    public static final String FUNC_GETRQSTLIST = "getRqstList";

    public static final String FUNC_RQSTLIST = "RqstList";

    public static final String FUNC_WHATISMYTOKEN = "whatIsMyToken";

    public static final String FUNC_SOLVERQST = "solveRqst";

    public static final String FUNC_TOKENVERIFICATION = "tokenVerification";

    public static final String FUNC_TEST = "test";

    @Deprecated
    protected KCliteWithToken2_sol_KCliteWithToken2(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected KCliteWithToken2_sol_KCliteWithToken2(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected KCliteWithToken2_sol_KCliteWithToken2(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected KCliteWithToken2_sol_KCliteWithToken2(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple2<Utf8String, Address>> TokenList(Uint256 param0) {
        final Function function = new Function(FUNC_TOKENLIST, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple2<Utf8String, Address>>(
                new Callable<Tuple2<Utf8String, Address>>() {
                    @Override
                    public Tuple2<Utf8String, Address> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Utf8String, Address>(
                                (Utf8String) results.get(0), 
                                (Address) results.get(1));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getToken() {
        final Function function = new Function(
                FUNC_GETTOKEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sendRqst(Utf8String _HsptName, Utf8String _Ip) {
        final Function function = new Function(
                FUNC_SENDRQST, 
                Arrays.<Type>asList(_HsptName, _Ip), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> getHpstIp() {
        final Function function = new Function(FUNC_GETHPSTIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple3<Utf8String, Utf8String, Address>> HsptList(Uint256 param0) {
        final Function function = new Function(FUNC_HSPTLIST, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<Utf8String, Utf8String, Address>>(
                new Callable<Tuple3<Utf8String, Utf8String, Address>>() {
                    @Override
                    public Tuple3<Utf8String, Utf8String, Address> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Utf8String, Utf8String, Address>(
                                (Utf8String) results.get(0), 
                                (Utf8String) results.get(1), 
                                (Address) results.get(2));
                    }
                });
    }

    public RemoteCall<Utf8String> getRqstList() {
        final Function function = new Function(FUNC_GETRQSTLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple3<Utf8String, Utf8String, Address>> RqstList(Uint256 param0) {
        final Function function = new Function(FUNC_RQSTLIST, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<Utf8String, Utf8String, Address>>(
                new Callable<Tuple3<Utf8String, Utf8String, Address>>() {
                    @Override
                    public Tuple3<Utf8String, Utf8String, Address> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Utf8String, Utf8String, Address>(
                                (Utf8String) results.get(0), 
                                (Utf8String) results.get(1), 
                                (Address) results.get(2));
                    }
                });
    }

    public RemoteCall<Utf8String> whatIsMyToken() {
        final Function function = new Function(FUNC_WHATISMYTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> solveRqst(Utf8String _HsptName) {
        final Function function = new Function(
                FUNC_SOLVERQST, 
                Arrays.<Type>asList(_HsptName), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> tokenVerification(Utf8String _token) {
        final Function function = new Function(FUNC_TOKENVERIFICATION, 
                Arrays.<Type>asList(_token), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> test() {
        final Function function = new Function(FUNC_TEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<KCliteWithToken2_sol_KCliteWithToken2> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(KCliteWithToken2_sol_KCliteWithToken2.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<KCliteWithToken2_sol_KCliteWithToken2> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(KCliteWithToken2_sol_KCliteWithToken2.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<KCliteWithToken2_sol_KCliteWithToken2> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(KCliteWithToken2_sol_KCliteWithToken2.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<KCliteWithToken2_sol_KCliteWithToken2> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(KCliteWithToken2_sol_KCliteWithToken2.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static KCliteWithToken2_sol_KCliteWithToken2 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new KCliteWithToken2_sol_KCliteWithToken2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static KCliteWithToken2_sol_KCliteWithToken2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new KCliteWithToken2_sol_KCliteWithToken2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static KCliteWithToken2_sol_KCliteWithToken2 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new KCliteWithToken2_sol_KCliteWithToken2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static KCliteWithToken2_sol_KCliteWithToken2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new KCliteWithToken2_sol_KCliteWithToken2(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
